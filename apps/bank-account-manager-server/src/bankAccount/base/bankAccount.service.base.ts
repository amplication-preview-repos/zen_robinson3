/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BankAccount as PrismaBankAccount,
  Analytics as PrismaAnalytics,
  Dashboard as PrismaDashboard,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class BankAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankAccount.count(args);
  }

  async bankAccounts<T extends Prisma.BankAccountFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankAccountFindManyArgs>
  ): Promise<PrismaBankAccount[]> {
    return this.prisma.bankAccount.findMany<Prisma.BankAccountFindManyArgs>(
      args
    );
  }
  async bankAccount<T extends Prisma.BankAccountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankAccountFindUniqueArgs>
  ): Promise<PrismaBankAccount | null> {
    return this.prisma.bankAccount.findUnique(args);
  }
  async createBankAccount<T extends Prisma.BankAccountCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankAccountCreateArgs>
  ): Promise<PrismaBankAccount> {
    return this.prisma.bankAccount.create<T>(args);
  }
  async updateBankAccount<T extends Prisma.BankAccountUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankAccountUpdateArgs>
  ): Promise<PrismaBankAccount> {
    return this.prisma.bankAccount.update<T>(args);
  }
  async deleteBankAccount<T extends Prisma.BankAccountDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankAccountDeleteArgs>
  ): Promise<PrismaBankAccount> {
    return this.prisma.bankAccount.delete(args);
  }

  async findAnalyticsItems(
    parentId: string,
    args: Prisma.AnalyticsFindManyArgs
  ): Promise<PrismaAnalytics[]> {
    return this.prisma.bankAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analyticsItems(args);
  }

  async findDashboards(
    parentId: string,
    args: Prisma.DashboardFindManyArgs
  ): Promise<PrismaDashboard[]> {
    return this.prisma.bankAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dashboards(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.bankAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
